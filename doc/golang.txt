==============================================================================
CONTENTS                                                *golang* *golang-contents*

    Installation...........................: |golang-installation|
    Usage..................................: |golang-usage|
    Settings...............................: |golang-settings|
    Issues.................................: |golang-issues|


==============================================================================
INSTALLATION                                               *golang-installation*

There are several ways to install the plugin. The recommended one is by using
Tim Pope's pathogen (http://www.vim.org/scripts/script.php?script_id=2332). In
that case, you can clone the plugin's git repository like so:
>
    git clone git://github.com/AndrewRadev/vim-golang.git ~/.vim/bundle/golang
<
If your vim configuration is under git version control, you could also set up
the repository as a submodule, which would allow you to update more easily.
The command is (provided you're in ~/.vim):
>
    git submodule add git://github.com/AndrewRadev/vim-golang.git bundle/golang
<
Another way is to simply copy all the essential directories inside the ~/.vim
directory: autoload, doc, ftdetect, ftplugin, indent, plugin, syntax.


==============================================================================
USAGE                                                             *golang-usage*

TODO: Reformat command description.
TODO: Extract and generalize mappings.

This plugin provides filetype detection, syntax highlighting and indentation
for the Go programming language. It also includes some useful tools for
working with Go code. For the most basic usage, just install the plugin and
edit Go code. You should get the basic benefits automatically. If you want to
use the other tools, read ahead.

This is a list of the provided commands:

:Fmt

    Filter the current Go buffer through gofmt. It tries to preserve cursor
    position and avoids replacing the buffer with stderr output.

:Import {path}

    Import ensures that the provided package {path} is imported in the current
    Go buffer, using proper style and ordering. If {path} is already being
    imported, an error will be displayed and the buffer will be untouched.

:ImportAs {localname} {path}

    Same as Import, but uses a custom local name for the package.

:Drop {path}

    Remove the import line for the provided package {path}, if present in the
    current Go buffer.  If {path} is not being imported, an error will be
    displayed and the buffer will be untouched.

:Godoc [package-name] [function-name]

    Displays documentation from godoc for the given {package-name}. If
    [function-name] is also provided, shows documentation for this particular
    function in this package.

    If called without any arguments, tries to find a package or a
    package-prefixed function, (for example, `fmt.Printf`), and makes a query
    for that.

    Tab-completes with all known package names.

Mappings:
>
    \f  -  Runs :Import fmt
    \F  -  Runs :Drop fmt

    if, af - "Function" text objects
<
The backslash is the default |maplocalleader|, so it is possible that your vim
is set to use a different character (:help maplocalleader).


==============================================================================
SETTINGS                                                       *golang-settings*

These are the variables that control the behaviour of the plugin. You can
write:
>
    let OPTION_NAME = 0
<
in your ~/.vimrc file to disable particular options. You can also write:
>
    let OPTION_NAME = 1
<
to enable particular options. At present, all options default to on.

go_highlight_array_whitespace_error ~

    Highlights white space after "[]".

go_highlight_chan_whitespace_error ~

    Highlights white space around the communications operator that don't follow
    the standard style.

go_highlight_extra_types ~

    Highlights commonly used library types (io.Reader, etc.).

go_highlight_space_tab_error ~

    Highlights instances of tabs following spaces.

go_highlight_trailing_whitespace_error ~

    Highlights trailing white space.

==============================================================================
ISSUES                                                           *golang-issues*

Any issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/vim-golang/issues


vim:tw=78:sw=4:ft=help:norl:
